gIterador
Funciona con HashMap.

Composicion
Funciona con estructuras de arbol.

Patron Decorador
	Su funcion principal es delegar responsabilidad (funciones o metods)
	decorador no es sinonimo de accesorio, debe agregar una funcionalidad
	evita la sobre explotacion de la herencia, 

Supongamos que tenemos 3 clases
----------------------------------
Case_Base : ClaseEsp1 : ClaseEsp2|
#------	  : #-------  :	#------- |
---------------------------------|
+----()   : +----()   : +----()  |
+----()   : +----()   : +----()  |
---------------------------------|


si se quieren agregar mas responsabilidades se usa la clase base se agrega un objeto de la clase 

Ejemplo de la Estructura:

                |—————————————|
                |<<interface>>|
                |  Elemento   |
                |—————————————|<————————————————————————|
                | #---------- |                         |
                |—————————————|                         |
                | +Operacion()|                         |
                |             |                         |
                |—————————————|                         |
                ^             ^                         |
               /               \                        |
              /                 \                       |
             /                  |—————————————|         |
|—————————————|                 | <<abstract>>|         |
|  EleConcre  |                 |  Decorador  |         |
|—————————————|                 |—————————————|         |
| #---------- |                 |#Ele:Elemento|♦————————|
|—————————————|                 |—————————————|
| +Operacion()|                 | +Decorador()|
| +MP1()      |                 | +Operacion()|
|—————————————|                 |—————————————|
                                ^      ^      ^
                               /       |       \
                              /        |        \
                |—————————————||—————————————||—————————————|
                | Decorador1  ||  Decorador2 || Decorador3  |
                |—————————————||—————————————||—————————————|
                | #---------- || #---------- || #---------- |
                |—————————————||—————————————||—————————————|
                | +operacion()|| +operacion()|| +operacion()|
                | +ma1()      || +ma2()      ||             |
                |—————————————||—————————————||—————————————|


####EJERCICIO#####


            |————————————————————|
            |    <<interface>>   |
            |       Ventana      |
            |————————————————————|<—————————————————————————|
            |                    |                          |
            |————————————————————|                          |
            | +dibujar()         |                          |
            | +getNombre():String|                          |
            |————————————————————|                          |
                ^             ^                             |
               /<<implements>> \                            |
              /                 \                           |
             /              |——————————————————————|        |
|———————————————————————|   |     <<abstract>>     |        |
|     VentanaSimple     |   |       Decorador      |        |
|———————————————————————|   |——————————————————————|        |
| -n:String             |   |#v:Ventana            |♦———————|
|———————————————————————|   |——————————————————————|
| +VentanaSimple()      |   | +Decorador(o:Ventana)|
| +dibujar(){System.out}|   | +dibujar(){}         |
| +getNombre(return nom)|   | +getNombre(){}       |
|———————————————————————|   |——————————————————————|
                                       ^
                                       |
                                       |
                                |————————————————|
                                | DecoradorBoton |
                                |————————————————|
                                |                |
                                |————————————————|
                                | +operacion()   |
                                |                |
                                |————————————————|


Si quiere agregar metodos espesificos (propios) en la clase concreta o en algun decorador espesifico, deberan espesificarlos en la clase base.

                |—————————————|
                |<<interface>>|
                |  ClaseBase  |
                |—————————————|
                | #---------- |
                |—————————————|<————————————————————————|
                | +Operacion()|                         |
                | +mp1()      |                         |
                | +mp2()      |                         |
                | +mp3()      |                         |
                |—————————————|                         |
                ^             ^                         |
               /               \                        |
              /                 \                       |
             /                  |—————————————|         |
|—————————————|                 | <<abstract>>|         |
| ClaseConcre |                 |  Decorador  |         |
|—————————————|                 |—————————————|         |
| #---------- |                 |#Ele:Elemento|♦————————|
|—————————————|                 |—————————————|
| +Operacion()|                 | +Decorador()|
| +mp1()      |                 | +operacion()|
| +mp2()      |                 |—————————————|
| +mp3()      |                 ^      ^      ^
|—————————————|                /       |       \
                              /        |        \
				|—————————————||—————————————||—————————————|
				| Decorador1  ||  Decorador2 || Decorador3  |
				|—————————————||—————————————||—————————————|
				| #---------- || #---------- || #---------- |
				|—————————————||—————————————||—————————————|
				| +operacion()|| +operacion()|| +operacion()|
				| +ma1()      || +ma2()      || +ma3()      |
				|—————————————||—————————————||—————————————|



Aplicar PATRON DECORADOR para una clase de arreglo de filas y columnas ejem

  |2 5 6|
  |1 4 3|
  |1 8 4|

La clase base :
  crear la matriz argregandole sus valores
  mostrar los valores
  obtener el determinante
Dos decoradores:
  1.-Invertir la matriz

  |2 5 6|   |2 1 1|  
  |1 4 3| = |5 4 8|
  |1 8 4|   |1 8 4|

  2.-Dada la matriz inverza obtener la matriz identidad

  |2 5 6|   |? ? ?|   |1 0 0|  
  |1 4 3| x |? ? ?| = |0 1 0|
  |1 8 4|   |? ? ?|   |0 0 1|




Patron Observador


                |———————————————————————————|
                |       <<interface>>       |
                |          Sujeto           |
                |———————————————————————————|——————|
                | +agregarObs(ob:Observador)|      |
                | +removerObs(ob:Observador)|      |
                | +notigicar()              |      |
                |———————————————————————————|      |
                     ^                             |
                    /                              | 
                   /<<Implementa>>                 |
                  /                                |
|——————————————————————————————————|               |
|          ConjuntoDatos           |               |
|——————————————————————————————————|               |
| -datos:ArrayList                 |               |
| -obs:ArrayList<Observadores>     |               |
|——————————————————————————————————|               |
| +ConjuntoDatos(){                |               |
|      datos=new ArrayList()<Int.>;|               |
|      obs=new ArrayList()<Int.>;  |               |
|  }                               |               |
| +agregarObs(o:Observador){       |<——————————————————————————|
|     obs.add(o);                  |               |           |
|  }                               |               |           |
| +removerObs(o:Observador){       |               |           |
|     if(obs.size(o)>0){           |               |           |
|           obs.remove(o);         |               |           |
|      }                           |               |           |
|  }                               |               |           |
| +notigicar(){                    |               |           |
|      S.o.p("Actualizado")        |               |           |
|  }                               |               |           |
|——————————————————————————————————|               |           |
                                                   |           |
                                                   |           |
                                                   |           |
                |———————————————|                  |           |
                | <<interface>> | <<Notificacion>> |           |
                |   Observador  |<—————————————————|           |<<Composicion>>
                |———————————————|                              |
                | +actualizar() |                              |
                |———————————————|                              |
                     ^                                         |
                    /                                          |
                   /<<Implementa>>                             |              
                  /                                            |
|—————————————————————————————————————————————|                |
|             Imprimir                        |                |
|—————————————————————————————————————————————|                |
| -suj:Sujeto                                 |                |
|—————————————————————————————————————————————|                |
| +actualiza(s:Sujeto){                       |                |
|      suj=s;                                 |                |
|      Imprimir();                            |                |
|  }                                          |                |
| +agregarObs(o:Observador){                  |                |
|     obs.add(o);                             |                |
|  }                                          |                |
| +imprimir(){ //Este no es el constructor    |                |
|     datos:ArrayList<integer>=suj.GetDatos();|♦———————————————|
|     it:Iterator=datos.iterator()            |
|     while(it.hosNext()){                    |
|        S.o.p(""+(int)it.next());            |
|     }                                       |
|  }                                          |
| +Imprimir(s:Sujeto){                        |
|      suj=s;                                 |
|      suj.agregarObs(this)                   |
|  }                                          |
|—————————————————————————————————————————————|

